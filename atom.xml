<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rosco&#39;s Blog</title>
  
  <subtitle>Welcome To my website.</subtitle>
  <link href="https://rosco_k.gitee.io/blog/atom.xml" rel="self"/>
  
  <link href="https://rosco_k.gitee.io/blog/"/>
  <updated>2023-06-29T16:40:23.891Z</updated>
  <id>https://rosco_k.gitee.io/blog/</id>
  
  <author>
    <name>Rosco</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用STM32F401实现按键操控LED</title>
    <link href="https://rosco_k.gitee.io/blog/2023-06-30-35db5886.html"/>
    <id>https://rosco_k.gitee.io/blog/2023-06-30-35db5886.html</id>
    <published>2023-06-29T16:34:43.000Z</published>
    <updated>2023-06-29T16:40:23.891Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="功能要求"><a href="#功能要求" class="headerlink" title="功能要求"></a>功能要求</h1><p>通过一个按键控制 LED 显示</p><div class="table-container"><table><thead><tr><th>状态</th><th>功能</th></tr></thead><tbody><tr><td>1.常亮</td><td>此状态下 LED 处于常亮状态下，长按按键切换到状态2。</td></tr><tr><td>2.闪烁</td><td>此状态下LED闪烁周期为1s，默认亮0.1s，暗0.9s，通过每次单击按键一个周期内亮的时间增加0.1s直到加到1s回到初始状态，通过长按按键切换到状态3。</td></tr><tr><td>3.亮度调节</td><td>此状态下LED亮度可控(PWM)，以100%为最亮，默认初始10%亮度，通过单击按键，亮度增加10%，增加到90%回到初始状态；双击按键亮度减小10%，减到10%后不能再减小，长按回到状态1。</td></tr></tbody></table></div><h1 id="软硬件要求"><a href="#软硬件要求" class="headerlink" title="软硬件要求"></a>软硬件要求</h1><ul><li>我选用的开发板主控是 STM32F401CCU6 </li><li>代码平台选用的是 VsCode，配合 EIDE 插件和 CubeMX 完成开发</li></ul><h1 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h1><p>我将代码分为了两个部分，分别是状态功能和按键检测。</p><h2 id="状态功能"><a href="#状态功能" class="headerlink" title="状态功能"></a>状态功能</h2><p>此部分代码直接写在主函数 while 循环里</p><h3 id="状态一"><a href="#状态一" class="headerlink" title="状态一"></a>状态一</h3><p>直接将 GPIO 置为低电平以实现常亮</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);<span class="comment">// 点亮 LED</span></span><br></pre></td></tr></table></figure><h3 id="状态二"><a href="#状态二" class="headerlink" title="状态二"></a>状态二</h3><p>使用延时函数达到闪烁的目的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);<span class="comment">// 点亮 LED</span></span><br><span class="line">HAL_Delay(counter_1); <span class="comment">// 延迟 counter_1, 单位为 ms</span></span><br><span class="line">HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);<span class="comment">// 熄灭 LED</span></span><br><span class="line">HAL_Delay(<span class="number">1000</span> - counter_1);  <span class="comment">// 延迟，以满足周期为 1s</span></span><br></pre></td></tr></table></figure><p>其中 counter_1 为 LED 在 1s 内点亮的时间，以 1s 为周期闪烁。</p><h3 id="状态三"><a href="#状态三" class="headerlink" title="状态三"></a>状态三</h3><p>我采用的是软件 PWM 的方案（因为可以加分）</p><p>这里仍然采用延时函数来达到 PWM 的目的，经测试，当 PWM 的周期达到 20ms 时人眼已经无法察觉闪烁，所以可以直接用 HAL 库的延时函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);  <span class="comment">// 点亮 LED</span></span><br><span class="line">HAL_Delay(counter_2);   <span class="comment">// 延迟 1ms</span></span><br><span class="line">HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);  <span class="comment">// 熄灭 LED</span></span><br><span class="line">HAL_Delay(<span class="number">20</span> - counter_2);        <span class="comment">// 延迟，以满足周期为 20ms</span></span><br></pre></td></tr></table></figure><h2 id="按键检测"><a href="#按键检测" class="headerlink" title="按键检测"></a>按键检测</h2><p>使用外部中断检测按键单击，双击，长按三种状态，同时实现三种状态的相应功能。</p><p>具体代码较长，后面详细步骤会讲到。</p><p>以上就是总的代码的思路了。</p><h1 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h1><p>打开 CubeMX </p><h2 id="配置-GPIO"><a href="#配置-GPIO" class="headerlink" title="配置 GPIO"></a>配置 GPIO</h2><ul><li>PC13 选择为 GPIO_OUTPUT 模式，Pull-up, User Lable 改成 LED</li><li>PA0 选择位  GPIO_EXti0 模式（即外部触发模式），下降沿触发，Pull-up, User Lable 改成 KEy</li></ul><p><img src="E:/7.File/Stm32/2.HotPot/Funny_key/Attachment/1.png" alt="1"></p><p><img src="E:/7.File/Stm32/2.HotPot/Funny_key/Attachment/2.png" alt="2"></p><h2 id="配置定时器"><a href="#配置定时器" class="headerlink" title="配置定时器"></a>配置定时器</h2><p>我选用的是 TIM1</p><ul><li>分频值为 16 - 1 （我的主频是 16MHz)</li><li>计数周期为 1000 - 1</li><li>自动重装为 Enbale</li></ul><p><img src="E:/7.File/Stm32/2.HotPot/Funny_key/Attachment/3.png" alt="3"></p><h2 id="配置-NVIC"><a href="#配置-NVIC" class="headerlink" title="配置 NVIC"></a>配置 NVIC</h2><ul><li>启用 EXIT line0 interrupt，并将其抢占优先级设置为1</li><li>启用 定时器 1 的更新中断</li></ul><p><img src="E:/7.File/Stm32/2.HotPot/Funny_key/Attachment/4.png" alt="3"></p><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><ul><li>选择文件名和文件存放路径</li><li>工具链选择 Makefile</li><li>点击 GENERATE CODE</li></ul><p><img src="E:/7.File/Stm32/2.HotPot/Funny_key/Attachment/5.png" alt="5"></p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><p>使用 VsCode 开发 STM32 要用到 EIDE 插件或者 PlatformIO 插件，这里用的是 EIDE，详细步骤参照这位 UP 的<a href="https://www.bilibili.com/video/BV1Zu4y1f72H/?spm_id_from=333.999.0.0">视频</a></p><p>下载源代码，将对应的文件拖入相应的文件夹内，文件层级如下</p><p><img src="E:/7.File/Stm32/2.HotPot/Funny_key/Attachment/6.png" alt="6"></p><p>修改 Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_gpio.c 内的 HAL_GPIO_EXTI_IRQHandle 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_IRQHandler</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* EXTI line interrupt detected */</span></span><br><span class="line">  <span class="keyword">extern</span> <span class="type">uint8_t</span> scan_finish_flag;</span><br><span class="line">  <span class="keyword">if</span>(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (scan_finish_flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      scan_finish_flag = <span class="number">0</span>;</span><br><span class="line">      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      HAL_GPIO_EXTI_Callback(GPIO_Pin);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并下载即可</p><h1 id="缺点和不足"><a href="#缺点和不足" class="headerlink" title="缺点和不足"></a>缺点和不足</h1><p>由于采用外部中断触发按键检测，按下按键时需要 500ms 检测按键是单击，双击还是长按（长按需要 2000ms），在这段时间内，LED 的状态却决于按下按键之前的瞬间</p><ul><li>若前一个瞬间 LED 为低电平，后面将保持低电平，LED 持续点亮</li><li>若前一个瞬间 LED 为高电平，后见将保持高电平，LED 持续熄灭</li></ul><p>这种状态会持续到按键检测完成，这会导致按下按键的期间，LED 的状态不可预测，但是按键检测完毕后，功能恢复正常。</p><h2 id="造成的后果"><a href="#造成的后果" class="headerlink" title="造成的后果"></a>造成的后果</h2><p>由于 LED 的状态不可预测，当此代码被应用到其他代码的内部时，可能会出现问题。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>究其原因，是因为 STM32 的串行操作逻辑，一个时间只能执行一条任务</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li>也许可以采用并行操作逻辑，但是我还不会。</li><li>FPGA 是并行操作的，如果转换到 FPGA 的平台，这个问题将会迎刃而解</li></ul>]]></content>
    
    
    <summary type="html">检测按键单击、双击、长按，并实现相应功能</summary>
    
    
    
    
    <category term="STM32" scheme="https://rosco_k.gitee.io/blog/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>Basketball_Score_Indicator</title>
    <link href="https://rosco_k.gitee.io/blog/2023-05-31-3db63790.html"/>
    <id>https://rosco_k.gitee.io/blog/2023-05-31-3db63790.html</id>
    <published>2023-05-31T07:16:23.000Z</published>
    <updated>2023-05-31T07:35:24.571Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Basketball-Score-Indicator"><a href="#Basketball-Score-Indicator" class="headerlink" title="Basketball_Score_Indicator"></a>Basketball_Score_Indicator</h1><h2 id="顶层模块"><a href="#顶层模块" class="headerlink" title="顶层模块"></a>顶层模块</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Basketball_Score_Indicator (</span><br><span class="line">    <span class="keyword">input</span>       clk, </span><br><span class="line">    <span class="keyword">input</span>       clear_key,  <span class="comment">// 清屏信号，下降沿触发</span></span><br><span class="line">    <span class="keyword">input</span>       rst_n,      <span class="comment">// 复位信号，下降沿触发</span></span><br><span class="line">    <span class="keyword">input</span>       switch,     <span class="comment">// 倒计时开关，高电平有效</span></span><br><span class="line">    <span class="keyword">input</span>       key_1,      <span class="comment">// 队伍一加分按键，下降沿触发，加一分</span></span><br><span class="line">    <span class="keyword">input</span>       key_2,      <span class="comment">// 队伍二加分按键，下降沿触发，加一分</span></span><br><span class="line">    <span class="keyword">output</span>      vcc, gnd,</span><br><span class="line">    <span class="keyword">output</span>      scl,        <span class="comment">// IIC 通信时钟信号</span></span><br><span class="line">    <span class="keyword">inout</span>       sda         <span class="comment">// IIC 通信数据信号</span></span><br><span class="line">);</span><br><span class="line"> <span class="keyword">assign</span> vcc = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">assign</span> gnd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入按键消抖</span></span><br><span class="line">    <span class="keyword">wire</span> key_1_out, key_2_out;</span><br><span class="line"></span><br><span class="line">    Remove_Jitter   Remove_Jitter_Instance_1(</span><br><span class="line">        <span class="variable">.clk</span>        (clk),</span><br><span class="line">        <span class="variable">.rst_n</span>      (rst_n),</span><br><span class="line">        <span class="variable">.sw_in</span>      (key_1),</span><br><span class="line">        <span class="variable">.sw_out</span>     (key_1_out)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    Remove_Jitter   Remove_Jitter_Instance_2(</span><br><span class="line">        <span class="variable">.clk</span>        (clk),</span><br><span class="line">        <span class="variable">.rst_n</span>      (rst_n),</span><br><span class="line">        <span class="variable">.sw_in</span>      (key_2),</span><br><span class="line">        <span class="variable">.sw_out</span>     (key_2_out)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// OLED 显示</span></span><br><span class="line">    Oled_Top        Oled_Top_Instance(</span><br><span class="line">        <span class="variable">.clk</span>        (clk),</span><br><span class="line">        <span class="variable">.rst</span>        (rst_n),</span><br><span class="line">        <span class="variable">.clear_key</span>  (clear_key),</span><br><span class="line">        <span class="variable">.scl</span>        (scl),</span><br><span class="line">        <span class="variable">.sda</span>        (sda),</span><br><span class="line"></span><br><span class="line">        <span class="variable">.key_1</span>      (key_1_out),</span><br><span class="line">        <span class="variable">.key_2</span>      (key_2_out),</span><br><span class="line">        <span class="variable">.switch</span>     (switch)</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="消抖模块"><a href="#消抖模块" class="headerlink" title="消抖模块"></a>消抖模块</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按键消抖模块</span></span><br><span class="line"><span class="keyword">module</span> Remove_Jitter(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> sw_in,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> sw_out</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="comment">//按键本身值为1，按下按键后键值为0.</span></span><br><span class="line"><span class="keyword">reg</span> sw_in_r0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">sw_in_r0 &lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">sw_in_r0 &lt;= sw_in;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> edge_l, edge_h;</span><br><span class="line"><span class="keyword">assign</span> edge_l = sw_in_r0 &amp; (~sw_in); <span class="comment">//下降沿检测</span></span><br><span class="line"><span class="keyword">assign</span> edge_h = sw_in &amp; (~sw_in_r0);<span class="comment">//上升沿检测</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> edge_en; <span class="comment">//键值变化后，edge_en变为高</span></span><br><span class="line"><span class="keyword">assign</span> edge_en = edge_l | edge_h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">19</span>:<span class="number">0</span>] count;</span><br><span class="line"><span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">count &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(edge_en) <span class="keyword">begin</span></span><br><span class="line">count &lt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">count &lt;= count + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">sw_out &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(count == <span class="number">20&#x27;h2BF20</span>) <span class="keyword">begin</span></span><br><span class="line">sw_out &lt;= sw_in;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="OLED-显示模块"><a href="#OLED-显示模块" class="headerlink" title="OLED 显示模块"></a>OLED 显示模块</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//oled顶层模块</span></span><br><span class="line"><span class="keyword">module</span>    Oled_Top(</span><br><span class="line"><span class="keyword">input</span>clk,</span><br><span class="line"><span class="keyword">input</span>rst,</span><br><span class="line"></span><br><span class="line"><span class="keyword">input</span>clear_key,</span><br><span class="line"></span><br><span class="line"><span class="keyword">output</span>scl,</span><br><span class="line"><span class="keyword">inout</span>sda,</span><br><span class="line"><span class="keyword">input</span> key_1, key_2, switch</span><br><span class="line">);</span><br><span class="line"><span class="keyword">wire</span> on_key;</span><br><span class="line"><span class="keyword">assign</span> onkey = clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> gnd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">localparam</span>RST_T=<span class="number">1&#x27;b0</span>;<span class="comment">//复位有效</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">localparam</span>Oled_Idle=<span class="number">11&#x27;b000_0000_0001</span>;<span class="comment">//oled初始��?</span></span><br><span class="line"><span class="keyword">localparam</span>Oled_Init=<span class="number">11&#x27;b000_0000_0010</span>;<span class="comment">//oled初始��?</span></span><br><span class="line"><span class="keyword">localparam</span>Oled_Clear=<span class="number">11&#x27;b000_0000_0100</span>;<span class="comment">//oled初始��?</span></span><br><span class="line"><span class="keyword">localparam</span>Oled_On=<span class="number">11&#x27;b000_0000_1000</span>;<span class="comment">//oled初始��?</span></span><br><span class="line"><span class="keyword">localparam</span>Oled_Show=<span class="number">11&#x27;b000_0001_0000</span>;<span class="comment">//oled初始��?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">10</span>:<span class="number">0</span>]state, next_state;</span><br><span class="line"><span class="comment">//init</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span>init_req;<span class="comment">//初始化请��?</span></span><br><span class="line"><span class="keyword">wire</span>init_finish;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">23</span>:<span class="number">0</span>]init_data;</span><br><span class="line"><span class="keyword">reg</span>[<span class="number">35</span>:<span class="number">0</span>]delay_time;</span><br><span class="line"></span><br><span class="line"><span class="comment">//clear</span></span><br><span class="line"><span class="keyword">wire</span>clear_req;<span class="comment">//初始化请��?</span></span><br><span class="line"><span class="keyword">wire</span>clear_ack;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">23</span>:<span class="number">0</span>]clear_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//on</span></span><br><span class="line"><span class="keyword">wire</span>on_req;<span class="comment">//初始化请��?</span></span><br><span class="line"><span class="keyword">wire</span>on_ack;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">23</span>:<span class="number">0</span>]on_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//show</span></span><br><span class="line"><span class="keyword">wire</span>[<span class="number">6</span>:<span class="number">0</span>]start_x;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">3</span>:<span class="number">0</span>]start_y;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">5</span>:<span class="number">0</span>]show_select;</span><br><span class="line"><span class="keyword">wire</span>show_req;</span><br><span class="line"><span class="keyword">wire</span>show_ack;</span><br><span class="line"><span class="keyword">wire</span>[<span class="number">23</span>:<span class="number">0</span>]show_data;</span><br><span class="line"><span class="keyword">wire</span>show_end;</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span>w_ack;<span class="comment">//IIC传输应答</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">23</span>:<span class="number">0</span>] iic_data;</span><br><span class="line"><span class="keyword">wire</span>iic_req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">case</span>(state)</span><br><span class="line">Oled_Init:</span><br><span class="line">iic_data &lt;=init_data;</span><br><span class="line">Oled_Idle:</span><br><span class="line">iic_data &lt;=<span class="number">23&#x27;d0</span>;</span><br><span class="line">Oled_Clear:</span><br><span class="line">iic_data &lt;=clear_data;</span><br><span class="line">Oled_On:</span><br><span class="line">iic_data &lt;=on_data;</span><br><span class="line">Oled_Show:</span><br><span class="line">iic_data &lt;=show_data;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">iic_data &lt;=<span class="number">23&#x27;d0</span>;</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> iic_req = ( init_req == <span class="number">1&#x27;b1</span> || clear_req == <span class="number">1&#x27;b1</span> || on_req == <span class="number">1&#x27;b1</span> || show_req == <span class="number">1&#x27;b1</span>)? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> clear_req = (state == Oled_Clear) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">assign</span> on_req = (state == Oled_On) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">assign</span> show_req = (state == Oled_Show) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">assign</span> init_req = (state == Oled_Init &amp;&amp; delay_time &gt;=<span class="number">&#x27;d500_000</span>) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上电延时</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(rst == RST_T)</span><br><span class="line">delay_time &lt;= <span class="number">&#x27;d0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(delay_time &gt;= <span class="number">&#x27;d500_000</span>)</span><br><span class="line">delay_time &lt;= delay_time;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">delay_time &lt;= delay_time + <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span>(rst == RST_T)</span><br><span class="line">state &lt;= Oled_Init;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">state &lt;= next_state;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">case</span>(state)</span><br><span class="line">Oled_Init:</span><br><span class="line"><span class="keyword">if</span>(init_finish == <span class="number">1&#x27;b1</span>)</span><br><span class="line">next_state &lt;= Oled_Idle;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_state &lt;= Oled_Init;</span><br><span class="line">Oled_Idle:</span><br><span class="line"><span class="keyword">if</span>(clear_key == <span class="number">1&#x27;b0</span>)</span><br><span class="line">next_state &lt;= Oled_Clear;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(on_key == <span class="number">1&#x27;b0</span>)</span><br><span class="line">next_state &lt;= Oled_Show;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_state &lt;= Oled_Idle;</span><br><span class="line">Oled_Clear:</span><br><span class="line"><span class="keyword">if</span>(clear_ack == <span class="number">1&#x27;b1</span>)</span><br><span class="line">next_state &lt;= Oled_Idle;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_state &lt;= Oled_Clear;</span><br><span class="line">Oled_On:</span><br><span class="line"><span class="keyword">if</span>(on_ack == <span class="number">1&#x27;b1</span>)</span><br><span class="line">next_state &lt;= Oled_Idle;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_state &lt;= Oled_On;</span><br><span class="line">Oled_Show:</span><br><span class="line"><span class="keyword">if</span>(show_end == <span class="number">1&#x27;b1</span>)</span><br><span class="line">next_state &lt;= Oled_Idle;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">next_state &lt;= Oled_Show;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">next_state &lt;= Oled_Idle;</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">I2C_Master I2C_Master_V(</span><br><span class="line">        <span class="variable">.I_Clk_in</span>(clk),</span><br><span class="line">        <span class="variable">.I_Rst_n</span>(rst),</span><br><span class="line">        <span class="variable">.O_SCL</span>(scl),</span><br><span class="line">        <span class="variable">.IO_SDA</span>(sda),</span><br><span class="line">        <span class="comment">//control_sig</span></span><br><span class="line">        <span class="variable">.I_Start</span>(iic_req), </span><br><span class="line">        <span class="variable">.O_Done</span>(w_ack),    </span><br><span class="line">        <span class="variable">.I_R_W_SET</span>(<span class="number">1</span>),</span><br><span class="line">        <span class="variable">.I_Slave_Addr</span>(iic_data[<span class="number">23</span>:<span class="number">17</span>]),</span><br><span class="line">        <span class="variable">.I_R_W_Data</span>(iic_data[<span class="number">15</span>:<span class="number">0</span>]),</span><br><span class="line"><span class="variable">.O_Data</span>(),    </span><br><span class="line">        <span class="variable">.O_Error</span>()    </span><br><span class="line"> );</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> Oled_Init   Oled_Init_HP(</span><br><span class="line"></span><br><span class="line"><span class="variable">.clk</span>(clk),</span><br><span class="line"><span class="variable">.rst</span>(rst),</span><br><span class="line"><span class="variable">.init_req</span>(init_req),<span class="comment">//初始化请��?</span></span><br><span class="line"><span class="variable">.write_done</span>(w_ack),<span class="comment">//��?组初始化数据完成信号</span></span><br><span class="line"><span class="variable">.init_finish</span>(init_finish),<span class="comment">//初始化完成输��?</span></span><br><span class="line"><span class="variable">.Init_data</span>(init_data)<span class="comment">//初始化的数据</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Oled_Clear Oled_Clear_HP(</span><br><span class="line"><span class="variable">.clk</span>(clk),</span><br><span class="line"><span class="variable">.rst</span> (rst),</span><br><span class="line"></span><br><span class="line"><span class="variable">.write_done</span>(w_ack),<span class="comment">//清除��?组数据完��?</span></span><br><span class="line"></span><br><span class="line"><span class="variable">.clear_req</span> (clear_req),<span class="comment">//清除请求</span></span><br><span class="line"><span class="variable">.clear_ack</span> (clear_ack),<span class="comment">//清除完成</span></span><br><span class="line"></span><br><span class="line"><span class="variable">.clear_data</span>(clear_data)<span class="comment">//清除数据的命��?</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Oled_On  Oled_On_HP(</span><br><span class="line"><span class="variable">.clk</span> (clk),</span><br><span class="line"><span class="variable">.rst</span> (rst),</span><br><span class="line"><span class="variable">.write_done</span>(w_ack),<span class="comment">//写入��?组数据完��?</span></span><br><span class="line"><span class="variable">.On_req</span>(on_req),<span class="comment">//��?启请��?</span></span><br><span class="line"><span class="variable">.On_ack</span>(on_ack),<span class="comment">//��?启完��?</span></span><br><span class="line"><span class="variable">.On_data</span>(on_data)<span class="comment">//��?启数据的命令</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Oled_Show_control  Oled_Show_control_HP(</span><br><span class="line"></span><br><span class="line"><span class="variable">.clk</span>(clk),</span><br><span class="line"><span class="variable">.rst</span>  (rst),</span><br><span class="line"><span class="variable">.show_ack</span>(show_ack),</span><br><span class="line"><span class="variable">.show_req</span>(show_req),</span><br><span class="line"><span class="variable">.show_end</span>(show_end),</span><br><span class="line"><span class="variable">.start_x</span>(start_x),</span><br><span class="line"><span class="variable">.start_y</span>(start_y),</span><br><span class="line"><span class="variable">.show_select</span>(show_select)<span class="comment">//显示数据索引</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Oled_Show_Info  Oled_Show_Info_HP(</span><br><span class="line"><span class="variable">.clk</span>(clk),</span><br><span class="line"><span class="variable">.rst</span>(rst),</span><br><span class="line"></span><br><span class="line"><span class="variable">.write_done</span>(w_ack),<span class="comment">//清除��?组数据完��?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//起始坐标</span></span><br><span class="line"><span class="variable">.start_x</span>(start_x),</span><br><span class="line"><span class="variable">.start_y</span>(start_y),</span><br><span class="line"></span><br><span class="line"><span class="variable">.show_select</span>(show_select),<span class="comment">//显示数据索引</span></span><br><span class="line"></span><br><span class="line"><span class="variable">.show_req</span> (show_req),<span class="comment">//显示请求</span></span><br><span class="line"><span class="variable">.show_ack</span> (show_ack),<span class="comment">//显示完成</span></span><br><span class="line"></span><br><span class="line"><span class="variable">.show_data</span>(show_data),<span class="comment">//清除数据的命��?</span></span><br><span class="line"><span class="variable">.dd1</span>(dd1),</span><br><span class="line"><span class="variable">.d1</span>(d1),</span><br><span class="line"><span class="variable">.dd2</span>(dd2),</span><br><span class="line"><span class="variable">.d2</span>(d2),</span><br><span class="line"><span class="variable">.cc</span>(cc),</span><br><span class="line"><span class="variable">.c</span>(c)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] dd1, d1, dd2, d2, cc, c;</span><br><span class="line"></span><br><span class="line">key_detect ket_detect_HP(</span><br><span class="line"><span class="variable">.key_1</span>(key_1),</span><br><span class="line"><span class="variable">.key_2</span>(key_2),</span><br><span class="line"><span class="variable">.rst_n</span>(rst),</span><br><span class="line"><span class="variable">.dd1</span>(dd1),</span><br><span class="line"><span class="variable">.d1</span>(d1),</span><br><span class="line"><span class="variable">.dd2</span>(dd2),</span><br><span class="line"><span class="variable">.d2</span>(d2)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">count_down count_down_HP(</span><br><span class="line"><span class="variable">.clk</span>(clk),</span><br><span class="line"><span class="variable">.rst_n</span>(rst),</span><br><span class="line"><span class="variable">.cc</span>(cc),</span><br><span class="line"><span class="variable">.c</span>(c),</span><br><span class="line"><span class="variable">.switch</span>(switch)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">endmodule</span> </span><br></pre></td></tr></table></figure><p>完整源文件下载：<a href="https://wwcp.lanzout.com/b04k1hzdg">https://wwcp.lanzout.com/b04k1hzdg</a><br>密码:86qb</p>]]></content>
    
    
    <summary type="html">FPGA篮球计分器</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建个人博客（二）美化篇</title>
    <link href="https://rosco_k.gitee.io/blog/2023-04-30-ba20a606.html"/>
    <id>https://rosco_k.gitee.io/blog/2023-04-30-ba20a606.html</id>
    <published>2023-04-30T14:17:56.000Z</published>
    <updated>2023-05-01T02:47:41.656Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><div class="note inf flat"><p>你可以去<a href="https://hexo.io/themes/">官网</a>选择各种主题，我选的是<code>butterfly</code></p></div><blockquote><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p></blockquote><ul><li><p>这是 butterfly 的官网，也是安装主题完成后的博客的样子，</p></li><li><p>打开官网右上角的<a href="https://butterfly.js.org/archives/page/2/">归档</a>页，你可以看到作者的所有文章</p></li><li><p>作者一共写了六篇教程，建议从第一篇文章开始： <a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D">Butterfly 安装文档(一) 快速开始</a> </p></li></ul><h1 id="建议-amp-注意事项"><a href="#建议-amp-注意事项" class="headerlink" title="建议 &amp; 注意事项"></a>建议 &amp; 注意事项</h1><div class="note warning flat"><p>安装完后的网页与作者的网页不同，这是因为很多功能是默认关闭的</p><p>详细配置在 </p><ul><li>Butterfly 安装文档(三) 主题配置 -1 </li><li>Butterfly 安装文档(四) 主题配置 -2 </li></ul></div><h2 id="修改配置的正确姿势"><a href="#修改配置的正确姿势" class="headerlink" title="修改配置的正确姿势"></a>修改配置的正确姿势</h2><ul><li>用 Vscode 打开配置文件<code>_config.ym</code> 和 <code>_config.yml</code>并打开<code>文件-&gt;自动保存</code></li><li>在你的博客文件夹下打开 Git Blash，依次输入以下代码</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>打开<a href="http://localhost:4000/blog/">localhot:4000</a></li></ul><p>做完上述步骤后，你可以实现修改配置的同时，网页自动刷新并呈现出相应的效果</p><div class="note warning flat"><p>安装和配置时可能会遇到一些问题，下面给出我遇到的问题以及解决办法</p></div><h2 id="修改配置文件-config-yml-或-config-yml后生成网页报错"><a href="#修改配置文件-config-yml-或-config-yml后生成网页报错" class="headerlink" title="修改配置文件_config.yml 或 _config.yml后生成网页报错"></a>修改配置文件<code>_config.yml</code> 或 <code>_config.yml</code>后生成网页报错</h2><p>对任何配置文件的修改都需要在冒号’:’+ 空格 ` blankspace’ 后面，一定不要忘了空格！！！</p><hr>]]></content>
    
    
    <summary type="html">我们可以通过官方主题进行美化</summary>
    
    
    
    
    <category term="网页制作" scheme="https://rosco_k.gitee.io/blog/tags/%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客（一）基础篇</title>
    <link href="https://rosco_k.gitee.io/blog/2023-04-27-fba32f97.html"/>
    <id>https://rosco_k.gitee.io/blog/2023-04-27-fba32f97.html</id>
    <published>2023-04-27T13:44:23.000Z</published>
    <updated>2023-04-30T16:29:27.800Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\blog\assets\css\APlayer.min.css"><script src="\blog\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装并配置Git"><a href="#安装并配置Git" class="headerlink" title="安装并配置Git"></a>安装并配置Git</h1><div class="note info flat"><p>打开<a href="https://git-scm.com/downloads">官方地址</a>下载安装包,一路下一步.安装完成</p></div><h2 id="将Git与你的Gitee账号绑定"><a href="#将Git与你的Gitee账号绑定" class="headerlink" title="将Git与你的Gitee账号绑定"></a>将Git与你的Gitee账号绑定</h2><ol><li><p>鼠标在任何位置右键打开Git Blash</p></li><li><p>执行下列代码以绑定用户</p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的Gitee用户名&quot;</span><br></pre></td></tr></table></figure><p>继续执行下列代码以绑定邮箱</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;你的Gitee注册邮箱”</span><br></pre></td></tr></table></figure><h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h2><ol><li>在Git Blash中执行以下代码以生成SSH密钥</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><ol><li>打开SSH密钥所在目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`C:\Users\你当前的用户名\.ssh`</span><br></pre></td></tr></table></figure><ol><li>打开文件：id_rsa.pub，复制</li></ol><h2 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h2><ol><li><p>打开gitee主页，点击右上角头像，点击设置或者账号设置</p></li><li><p>在安全设置中选择SSH公钥</p></li><li><p>粘贴公钥到相应位置，确定</p></li></ol><hr><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><div class="note info flat"><p>hexo 需要 <code>node.js</code>环境才能安装，所以先安装 node.js</p><p>进入 node.js <a href="https://nodejs.org/en">官方地址</a>下载安装包，一路下一步</p></div><p>执行以下代码并返回版本号,如下图所示，即为正确安装</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">v18.16.0</span><br></pre></td></tr></table></figure><h2 id="部署hexo环境"><a href="#部署hexo环境" class="headerlink" title="部署hexo环境"></a>部署hexo环境</h2><ol><li>创建一个名为blog的文件，在文件里打开Git Bash,执行下列代码以初始化hexo</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ol><li>继续执行以下代码以部署本地hexo网页</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ol><li>按住’Ctrl’的同时点击网址即可打开，或者复制到浏览器打开</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:localhost:4000</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>ps:如果打开网页错误，localhost拒绝访问，你可以试试直接在浏览器输入<code>127.0.0.1：4000</code></p></div><div class="note success flat"><p>到此你应该能看到nexo的默认网页了</p></div><hr><h1 id="将blog上传到gitee"><a href="#将blog上传到gitee" class="headerlink" title="将blog上传到gitee"></a>将blog上传到gitee</h1><h2 id="在gitee上新建一个仓库"><a href="#在gitee上新建一个仓库" class="headerlink" title="在gitee上新建一个仓库"></a>在gitee上新建一个仓库</h2><ol><li>点击右上角加号-新建仓库，随便取个名称，选择开源（不然无法用 Gitee Pages 发布网页），点击创建</li><li>进入创建好的仓库，点击服务<code>Gitee Pages</code>，然后发布网页</li><li>你会在当前页面得到一个网址，它将是你以后访问博客的网址，复制这个网址</li></ol><h2 id="配置本地文件"><a href="#配置本地文件" class="headerlink" title="配置本地文件"></a>配置本地文件</h2><ol><li>打开blog文件夹下的<code>_config.yml</code>，将复制的网址填入<code>url:</code>后（”:”后面有一个空格），并添加 root 信息</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: 你复制的网址</span><br><span class="line">root: /你创建的仓库名</span><br></pre></td></tr></table></figure><ol><li>返回 Gitee ，打开你的仓库，点开橙色按钮<code>克隆/下载</code>，复制 https 地址</li><li>继续编辑 _config.yml 文件，滑到最后找到<code>deploy</code>修改为下列代码</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: 你复制的https地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><ol><li>安装 hexo-deployer-git 自动部署发布工具，在 Gitee Blash 中执行</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol><li>生成页面</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><ol><li>上传文件</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><div class="note success flat"><p>此时放回你的Gitee仓库，你应该会看到内容更新</p><p>在浏览器中执行之前复制的网址，就可以访问你的网页了</p></div>]]></content>
    
    
    <summary type="html">在这篇文章中，你将利用Gitee+hexo零成本搭建个人博客</summary>
    
    
    
    
    <category term="网页制作" scheme="https://rosco_k.gitee.io/blog/tags/%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C/"/>
    
  </entry>
  
</feed>
